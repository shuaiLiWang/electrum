import json
from eth_account import Account
from eth_keys import keys
from eth_wallet.utils import (
    create_directory,
)


from mnemonic import Mnemonic
from .pywalib import PyWalib, InvalidPasswordException

class Eth_Wallet:
    """
    Class defining the main wallet account
    """

    def __init__(self, keystore_dir=keystore_dir, chain_id=chain_id):
        self.account = None
        self.chain_id = chain_id
        self.pywalib = PyWalib(keystore_dir=keystore_dir, chain_id=chain_id)

    def create(self, password='', restore_sentence=None):
        """
        Creates new wallet that means private key with an attached address using os.urandom CSPRNG
        :param password: Is used as extra randomness to whatever randomness your OS can provide
        :param restore_sentence: Used in case of restoring wallet from mnemonic sentence.
        :return: object with private key
        """
        extra_entropy = password

        mnemonic = Mnemonic("english")
        if restore_sentence is None:
            self.mnemonic_sentence = mnemonic.generate()
        else:
            self.mnemonic_sentence = restore_sentence

        seed = mnemonic.to_seed(self.mnemonic_sentence, extra_entropy)
        master_private_key = seed[32:]

        # self.account = Account.create(extra_entropy)
        self.account = self.set_account(master_private_key)
        self.pywalib.add_account(self.account)
        # update config address
        #self.conf.update_eth_address(self.account.address)
        # update config public key
        #self.conf.update_public_key(pub_key.to_hex())
        return self

    def get_account(self):
        """
        Returns account
        :return: account object
        """
        return self.account

    def set_account(self, private_key):
        """
        Creates new account from private key with appropriate address
        :param private_key: in format hex str/bytes/int/eth_keys.datatypes.PrivateKey
        :return: currently created account
        """
        self.account = Account.privateKeyToAccount(private_key)
        return self.account

    def save_keystore(self, password):
        """
        Encrypts and save keystore to path
        :param password: user password from keystore
        :return: path
        """
        #create_directory(self.conf.keystore_location)
        keystore_path = self.pywalib.keystore_dir + self.name
        encrypted_private_key = Account.encrypt(self.account.privateKey, password)
        with open(keystore_path, 'w+') as outfile:
            json.dump(encrypted_private_key, outfile, ensure_ascii=False)
        return keystore_path

    def load_keystore(self, password):
        """
        Loads wallet account from decrypted keystore
        :param password: user password from keystore
        :return: instance of this class
        """
        keystore_path = self.pywalib.keystore_dir + self.name
        with open(keystore_path) as keystore:
            keyfile_json = json.load(keystore)

        try:
            private_key = Account.decrypt(keyfile_json, password)
        except ValueError:
            raise InvalidPasswordException()

        self.account = self.set_account(private_key)
        self.pywalib.add_account(self.account)
        return self

    def get_mnemonic(self):
        """
        Returns BIP39 mnemonic sentence
        :return: mnemonic words
        """
        return self.mnemonic_sentence

    def get_private_key(self):
        """
        Returns wallet private key
        :return: private key
        """
        return self.account.privateKey  # to print private key in hex use account.privateKey.hex() function

    def get_public_key(self):
        """
        Returns wallet public key
        :return: public key
        """
        priv_key = keys.PrivateKey(self.account.privateKey)
        pub_key = priv_key.public_key
        return pub_key.to_hex()

    def get_address(self):
        """
        Returns wallet address
        :return: address
        """
        return self.account.address

    def get_balance(self, address):
        """
        Read balance from the Ethereum network in ether
        :return: number of ether on users account
        """
        return self.pywalib.get_balance(address, chain_id=self.chain_id)

